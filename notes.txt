6 Create basic setup & server
======================================================================================
npm init
  - server.js entry for fullstack apps

npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator

  - dev dependancies, nodemon constantly watches the application and updates
npm i -D nodemon

  - update package.json to enable nodemon with 'npm run server'
    "start": "node server.js",
    "server": "nodemon server.js"

#server.js: 
  - Create basic one file Express route.

7 Connect Mongoose & MongoDB.
====================================================================================
#CONFIG/keys.js 
  - Create key file for database
#server.js 
  - Create DB URI const
  - Call Mongoose.connect(db) and receiver promise

8 Create Route Files for Express Router and test routes that the api will respond to.
===================================================================================
  - Use express router to separate routes into separate files for each of our resources: 
  - Users, Profiles, Posts.

#ROUTES/API/users.js
  - This is just going to deal with authentication ( username/email/password )
#ROUTES/API/profile.js
  - This is going to deal with profile (location/bio/experiences/links)
#ROUTES/API/posts.js
  - This is going to deal with posts and comments

#server.js 
  - Import those files into server.js | const users = require('/routes/api/users')
  - Express().use those routes | app.use("./api/posts", posts);

#users.js 
  - create route on top of the server.js routes we just made for the extra '/test' url | router.get('/test', (req, res) = res.json())
  - this is added on to previous route so the endpoint will be api/posts/test. 
  - res.json is like res.send but with json.
  - export the route so that server.js can use it.
  - add comments of with Route, Description & Access.
#profile.js 
  - copy Users.js n fill in different message
#posts.js 
  - copy Users.js n fill in different message



++++++++++++++++++++++++++
PROFILE MODEL & API ROUTES 
++++++++++++++++++++++++++



9 Create User Model & schema
======================================================================================
  - The convention for models is to start with a capital and to be singular

#MODELS/User.js
  - Create: check file for notes on code.

10 User registration, bcrypt & postman
======================================================================================
                    200: successful response
                    400: validation error (invalid email)
                    404: not found
                    500: server errors
users.js
  - create router enndpoint for registration
  - import User model at the top
  - build logic for '/register' endpoint/route: using the User model findOne user with email of req.body.email, .then if user exists, respond with status 400 & error message, else create a new user const with the parameters from the requests body, name, email, password  (including gravatar).
  - when we send data to a route with a form.. we access it with req.body
  - install gravatar & import it at the top
npm i gravatar
  -  create a new const for avatar with takes in email & options (as per node gravatar github docs)
  - import bcrypt. 
  - run bcrypt generate salt, hash the password with the salt and save() the new user with - - mongoose and respond as json with the new user
  - We can now register a user.

11 Login User & Return token.
======================================================================================
users.js 
  - create route for Login
  - find user by email
  - if email doesnt exist respond with error
  - else compare the password with bcrypt.compare and print 'success' if true.
  - test with postman

  - import in json webtokens
  - change 'success' response to token response

13 Passport JWT Authentication Strategy
======================================================================================
Server.js
  - import passport
  - add passport middleware & config lines
CONFIG/passport.js
  - create our JWT passport strategy
ROUTES/users.js
  - create a protected route for users/current

  14 Server side validation
======================================================================================
  - Validator module
VALIDATION/register.js
  - create global function for validating input
  - create all the logic for the validateRegisterInput function here that we'll push the the request body through every time the registration endpoint is hit.
VALIDATION/is-empty.js
  - create cusom empty field validation function and export it
ROUTES/users.js
  - import /register endpoint validation function validateRegisterInput(data)
  - can add this chunk of code to any other routes that takes in data (req.body)

VALIDATION/login.js
  - paste in all the register.js validation file in and remove everything apart from email and password stuff, change name of function to validateLoginInput
ROUTES/users.js
  - import /login endpoint validation function validateRegisterInput(data)
  - add new validation code to top of login route



++++++++++++++++++++++++++
PROFILE MODEL & API ROUTES 
++++++++++++++++++++++++++



  17 Create Profile Model
======================================================================================
MODELS/Profile.js
  - Create the profile mongoose model & schema

  18 Create USER GET Api/Profile Private Route
======================================================================================
ROUTES/Profile.js
  - Import mongoose User & Profile model
  - Create the api/profile GET route
  - Test on postman

  19 Create USER POST Api/Profile Private Route
======================================================================================
ROUTES/Profile.js
  - Create the api/profile POST (&UPDATE) route

20 Create profile validation file & function
======================================================================================
VALILDATION/Profile.js
  - Create the api/profile vallidation file for the POST&UPDATE route
  - Update Private Api/Profile route to check the validation of request before responding with anything
  - Add .populate('user', ['name', 'avatar']) code to populate from 'users' into the GET response. This is because we connected our user collection to the profile inside the model.

21 Create routes to get the profile by the handle, by the ID and one to fetch all the profiles and serve as an array.
======================================================================================
ROUTES/Profile.js
  - Do those 3 routes

22 Create routes & validation files for posting new experience, posting new education.
======================================================================================
ROUTES/profile.js
  - Add POST api/profile/experience route
VLLIDATION/experience.js
  - Add eperience validation

ROUTES/profile.js
  - Add POST api/profile/education route
VLLIDATION/education.js
  - Add education validation

23 Create routes to delete education/experience and the whole profile
======================================================================================
ROUTES/profile.js
  - Add DELEte routes for experience & education routes and for the profile
  TEST ON POSTMAN



+++++++++++++++++++++++
POSTS MODEL & API ROUTES 
++++++++++++++++++++++++



24 Create Posts Model
======================================================================================
MODELS/Post.js
  - create file with api/posts model
VALIDATION/post.js
  - create file with the function to validate posts
ROUTES/posts.js
  - so far only a test route in here, add the real route for posts with the requests post parameters and save them to the model we made. Import the validation function and add the validation block before the block for submitting the new post.

26 Get & Delete Post Routes
======================================================================================
ROUTES/posts.js
  - create get route for all posts: GET api/posts
  - create get route for all posts by ID: GET api/posts/:id
  - create delete route for post by ID: DELETE api/posts/:id


27. Post Like & Unlike Routes
========================================================================================
ROUTES/posts.js
  - create the like post by id route: POST api/posts/like/:id
  - create the v similar unlike by id route: POST api/posts/unlike/:id

28. Add & Remove Comment Routes
=========================================================================================
ROUTES/posts.js
  - create the ADD comment by id route: POST api/posts/comment/:id
  - create the DELET comment by id route: DELETE api/posts/comment/:id/:comment_id 



++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
FRONT END+++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++

30. Create-reeact-app & set up concurrently
===================================================================================

#npm i -g create-react-app
#create-react-app client

CLIENT/package.json:
  - add "proxy": "http://localhost:5000", so that we don't have to write it everytime

MAIN/
#npm i concurrently
  - allows us to run a script and have multiple commands

MAIN/package.json
ADD:
"scripts": {
    "start": "node server.js",
    "server": "nodemon server.js",
    "client-install": "npm install --prefix client",
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\" \"npm run client\""
  },

  31. Clean create-react-app out and setup bootstrap & assets & chrome extensions
===================================================================================
  - clear the code in App.css & replace with the theme css prepared earlier
  - add bootstrap/fontawesome/jquery and any other CDN to index.html
  - install chrome extensions

  32. Basic Layout
===================================================================================
  - create in the src folder:
COMPONENTS/LAYOUT/Navbar.js
  - copy accross the navbar from theme landing.html file, change 'class' to 'className' & import into App.js
COMPONENTS/LAYOUT/Footer.js
  - add basic funcitonal component with date object & import file into App.js
COMPONENTS/LAYOUT/Landing.js
  - copy accross the landing section from theme landing.html file, change 'class' to 'className' & import into App.js

  33. React Router Setup. All Routes in App.js & Navbar Links
===================================================================================
  - install react router on the client side
#cd client
#npm i react-router-dom

MAIN/App.js:
  import { BrowserRouter as Router, Route } from 'react-router-dom'
  add & change:
   *<Router>
      <div className="App">
        <Navbar />
        *<Route exact path="/" component={Landing} />
        <Footer />
      </div>
    </Router>
COMPONENTS/AUTH/Login.js
COMPONENTS/AUTH/Register.js
  - basic class based components with text to test routes
MAIN/App.js:
  - add react-routes for /register and /login
COMPONENTS/LAYOUT/Navbar.js
  - import Link from react router
  - add Links instead of a tags and to="/" instead of href="/.html"

  34. Create Basic Register Form & Login Form
==========================================================================
COMPONENTS/AUTH/Register.js
  - copy base from theme & change class to className
  - initialise the state
  - for each input make the value 'this.state.xxx' and the name 'xxx' with an onChange={onChange}. Create the onChange function:
    onChange = e => {
      this.setState({ [e.target.name]: e.target.value });
    };
  - remove form html submit action and replace with an onSubmit={onSubmit} funciton, create that function and initially just console log the form inputs as an object.
COMPONENTS/AUTH/Login.js
  - same as for register

  37. Testing registration with axios
==========================================================================
  - install axios
#cd client
#npm i axios

COMPONENTS/AUTH/Register.js
  - import axios
  - instead of console logging the user now attempt to register a user with axios:
  axios
      .post("api/users/register", newUser)
      .then(res => {
        console.log(res.data);
      })
      .catch(err => {
        console.log(err.response.data);
      });

  38. Display errors with classnames & state & bootstrtap
==========================================================================
A Bootstrap div with isInvalid as a class will show when an inoputis invalid with error text inside.

  - If something is true, add a class to it:
#npm install classnames

COMPONENTS/AUTH/Register.js
  - import classnames from 'classnames'
  - edit the validation in Register.js file to output validation with bootstrap & js
  - add noValidate to the form to prevent html5 validation

  39. REDUX Store & Chrome Extension setup
==========================================================================

#npm i redux react-redux redux-thunk

  - redux thunk is middleware allows us to wait for the response from an ajax request before dispatching to our reducer.

MAIN/App.js:
  - import provider from react-redux
#import { Provider } from "react-redux";
  - it provides our application with the store which holds the state
  - wrap the return in a Provider which takes in a store prop.

MAIN/store.js:
  - make new file.
  - createStore & import the relevant functions
#import { createStore, applyMiddleware } from 'redux'
#const store = createStore(() => [], {}, applyMiddleware())

MAIN/App.js:
  - import the store
#import store from "./store";

MAIN/store.js:
  - Bring in thunk middleware. In order to deal with asynchronous requests and wait fo response
#import thunk from 'redux-thunk'
  - Set it as a middleware variable & bring into the store
#const middleware = { thunk };
#const store = createStore(() => [], {}, applyMiddleware(...middleware))

MAIN/REDUCERS/index.js
  - create base reducer

MAIN/REDUCERS/authReducer.js
  - create authentication reducer

MAIN/store.js:
  - setup the Redux extension here

41 Redux Action & Reducer EXAMPLE
==============================================================================================
COMPONENTS/Register.js
  - create the function inside onSubmit that calls the necessary Action and passes the registering 'user' object to it.
#this.props.registerUser(newUser);

ACTIONS/authActions.js
ACTIONS/types.js
  - create an action Type TEST_DISPATCH
  - create an action AuthActions.js which essentially is an Action (function) of type TEST_DISPATCH that takes the form input (in theory doing extra stuff to it) and dispatches it to the Reducer via a payload.

REDUCERS/authReducer.js
  - The switch with the correct action.type takes the payload from said action and attaches it to the current (spread operator) state.

COMPONENTS/Register.js
  - connect the component to the redux store
  //function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)
  - dont forget to register the prop type
  - mapStateToProps so that we can output the new state into the render method
  - in the render method, grab/destructure the user object from the auth prop and get the 'user'.


42 Registration and the errors reducer
========================================================================================================
COMPONENTS/Register.js
  - create the function inside onSubmit that calls the necessary Action and passes the registering 'user' object to it.
#this.props.registerUser(newUser);

ACTIONS/authActions.js
  - import in the GET_ERRORS Action type & create it in Types.js
  - create logic for the axios call which hits the server endpoints and if successful redirects to login page,
  if not it dispathes the errors to the state. We use dispatch middleware because we can not simply return the error state, we need to wait for it to respond first (async).

REDUCERS/errorReducer.js
  - import the GET_ERRORS Action type
  - add it as a case and return the action.payload, which will include the errors object which comes from our server endpoint.

REDUCERS/index.js
  - add the errorReducer to the root reducer.

COMPONENTS/Register.js
 - connect the component to the redux store with mapStateToProps
 - register the prop type
 - set the redux state to the component state if the getPropsFromState has an errors object:
    #componentWillReceiveProps(nextProps) {
        if (nextProps.errors) {
          this.setState({ errors: nextProps.errors });
        }
      }


--------------------------------------------
TO REDIRECT THE PAGE FROM WITHIN ACTION
  - import { withRouter } from "react-router-dom";
  - add it to the component export at the bottom.. withRouter(component)
  - pass 'this.props.history' as a second variable in the action invoking function
  - use in it the action #.then(res => {history.push("login");})

REDIRECT TO A PAGE FROM INSIDE A COMPONENT
  #this.props.history.push('/dashboard')
  --------------------------------------------


  43 Redux Login Action & Set Current User
===================================================================================================
We want to take the token when we log in we get a token and store it in local storage.
If we're then logged in, we send that with every request we make. The logout funcion will destroy the token.

ACTIONS/authActions.js
  - create Login action for logging in & saving token to local storage after axios login is successful.
  - ceate setAuthToken function to set the token to headers

UTILS/setAuthToken.js
  - create this function
  - use axios defaults to set a default header

ACTIONS/authActions.js
  - import setAuthToken
  - decode the token to get the user data out 
  - install jwt decode
#cd client
#npm install jwt-decode
  - import jwt_decode at top.
  - decode the token and set it to an object called 'decoded'
  - dspatch setCurrentUser function with the decoded object as the payload and the action type as SET_CURRENT_USER
ACTIONS/types.js
  - add SET_CURRENT_USER action type

REDUCERS/authReducer.js
  - import SET_CURRENT_USER action type
  - create a case for it and set isAuthenticated to true if the object !isEmptyAG, import isEmptyAG from below file. That way we can just send an empty object if we want to logout
VALIDATION/is-empty.js
  - create a validation function isEmptyAG and export it.

44 Redux Login Form functionality & using local storage to stay logged in
===================================================================================================
COMPONENTS/Login.js
  - import PropTypes
  - import loginUser action from auth/actions
  - import connect 
  - export connect at the bottom with the right putting loginUser as a function we are calling from the actions file.
  - map auth and errors state to props in mapStateToProps function
  - add auth and errors to propTypes function
  - import classnames to be able to render classes with logic 
  - add the classname logic to desplay errors from the backend and reducer 
  - create lifecyclemethod componentWillReceiveProps to map any error props received to the component state. so that if they exist the render method will display them. Finally add if isAuthenticated redirect to dashboard.
#this.props.history.push("/dashboard");
  - call the action function loginUser in onSubmit function

Now the login works but reloading will loose our authenticated state..
So we need to add logic in App.js to always check to see if we're logged in. By getting the token from the local storage on every App.js request.

MAIN/App.js
  - import jwt-decode
  - import setAuthToken utility
  - import setCurrentUser action

  on every request, set logic to check for token, set it to the auth header and decode it and set user and isAuthenticated to state with the setCurrentUser action.

45 Logout & Conditional Navbar Links
===================================================================================================

ACTIONS/authActions.js
  - create logoutUser action

conditional rendering of navbar:
COMPONENTS/LAYOUT/Navbar.js
  - import PropTypes
  - import connect
  - import logoutUser action
  - bring in the auth state with mapStateToProps
  - connect the component to the redux store
  const myContainer = connect(props, dispatchs)(ComponentIWantToConnect)
  - in render method pullout the auth state componenets that we will test for 
  - create two JSX const instances for the logged in user and for the logged out user which will be displayed conditionally:
  authLinks: 
    - create logout link, bind this as there is no constructor so that we can call the onLogoutClick function outside the render method. Create that function.
    - add a gravatar img with inline style:
      #style={{ width: "25px", marginRight: "5px" }}
      #className="rounded-circle" bootstrap class 
  - add a ternary in the render to conditionally display those.

logout user when token expires:
MAIN/App.js
  - add logic to local storage check

create redirects on login&register pages if use is logged in:
COMPONENTS/Login.js
  - commponentDidMount() function with history.push method
COMPONENTS/Register.js
  - commponentDidMount() function with history.push method
COMPONENTS/landing.js
  - need to bring in redux here to make this work: mapstatetoprops, proptypes & connect.
  - commponentDidMount() function with history.push method


46 TextFieldGroupInput components instead of form groups
===================================================================================================

make inputs functional components that we pass props to:
COMMON/TextFieldGroup.js
  - create file
  - set how props & default props will behave 

COMPONENTS/Login.js
  - replace form gorups with TextFieldGroup components

COMPONENTS/Register.js
  - replace form goups with TextFieldGroup components
  - add the info prop for the email field to explain gravatar

47 Profile Reducer & get current profile & clear profile state
========================================================================
Create Dashboard component which getsCurrentProfile with the componentDidMount lifecycle method when redirected to from Login and displays the profile (doesn't exist yet)
------------------------------------------------------------------------
REDUCERS/profileReducer.js
  - create reducer file

REDUCERS/index.js
  - add it to the reducer index

ACTIONS/types.js
  - add a type

ACTIONS/profileAction.js
  - add new actions file
  - add getCurrentProfile action
  - add setProfileLoading action

REDUCERS/profileReducer.js
  - import actions
  - initalise State
  - add reducer functions for GET_PROFILE & PROFILE_LOADING

COMPONENTS/DASHBOARD/Dashboard.js
  - make basic file with a rendered word & import react & component, PropTypes & connect getCurrentProfile to redux with null mapStateToProps value
  - add componentDidMount to display the getCurrentProfile straight away

  MAIN/App.js
  - Create a route for this new page
  - import Dashboard component into the 'body' routes and set it up 

Now we want to clear the profile state when we logout so we need to create the action and add it to the logout button and token expiry function:
------------------------------------------------------------------------
ACTIONS/profileAction.js
  - add clearCurrentProfile action
ACTIONS/profileReducer.js
  - add CLEAR_CURRENT_PROFILE case
LAYOUT/Navbar.js
  - add clearCurrentProfile call to the onLogoutCLick button
  - connect the function to Redux at bottom
MAIN/App.js
  - clear Redux state when token expires: store.dispatch(clearCurrentProfile())

48 Spinner Component & Dashboard Start
========================================================================
Create conditional rendering for the dashboard depending if it is loading or not and if there is a profile in the state or not.
------------------------------------------------------------------------
COMPONENTS/DASHBOARD/Dashboard.js
  - connect Dashboard to redux, proptypes, connect mapstatetoprops...
  - add some basic conditional rendering for the loading/not loading
COMPONENTS/COMMON/Spinner.js
  - create basic spinner functional component
COMPONENTS/DASHBOARD/Dashboard.js
  - import spinner
  - create the logic for conditional rendering the BASIC dashboard

========================================================================
49 Private Route Setup
------------------------------------------------------------------------
Not as easy to do natively as in Angular. We want to create a provate route component to check if we're authenticated and if its not it will redirect us to login.
------------------------------------------------------------------------
COMPONENTS/COMMON/PrivateRoute.js
  - create file & the logic here 
MAIN/App.js
  - import PrivateRoute
  - Change dashboard Route to PrivateRoute
  - bring in Switch, we need to wrap every PrivateRoute in Switch to prevent redirect issues

========================================================================
50&51. CreateProfile Component & Route
------------------------------------------------------------------------
Create private route for the CreateProfile component in App.js and build the CreateProfile component by first creating the various input groups necessary for the register form.
------------------------------------------------------------------------
MAIN/App.js
  - import PrivateRoute
  - Change CreatProfile Route to PrivateRoute & Switch it up

COMPONENTS/CREATE-PROFILE/CreateProfile.js
  - build out this file

COMPONENTS/COMMON/TextAreaFieldGroup.js
  - copy textField group and delete some unneccessary parts

COMPONENTS/COMMON/SelectListGroup.js
  - copy again n change up

COMPONENTS/COMMON/InputGroup.js
  - copy again n change up


========================================================================
52 CreateProfile Form
------------------------------------------------------------------------
Populate CreateProfile.js
------------------------------------------------------------------------
COMPONENTS/CREATE-PROFILE/CreateProfile.js
  - create toggle state logic for social inputs and output only if state is true.
  - add all of the form Components we created in 50&51 passing the correct props for each.

========================================================================
53 CreateProfile Form Action
------------------------------------------------------------------------
Add createProfile action 
  - pass in history to be able to redirect with withrouter

COMPONENTS/CREATE-PROFILE/CreateProfile.js
  - add componentWillReceiveProps function to test errors
  - create onSubmit functtion to submit the data to the action


54 Add Profile Actions & Delete Account Components to dashboard
========================================================================
Create the conditional rendering logic for the dashboard if the profile does exist. i.e. build the users dashboard. Create the delete button and the Action for deleting in profileActions.
------------------------------------------------------------------------
COMPONENTS/DASHBOARD/Dashboard.js
  -add Link to profile

COMPONENTS/DASHBOARD/ProfileActions.js
  - create the component by copying accross from the html theme and change classes to className and change a tags to Link to=/...

COMPONENTS/DASHBOARD/Dashboard.js
  -add the ProfileActions component here
delete account stuff:
  -import deleteAccount action (not created yet)
  -connect it to Redux
  -create the functin that calls it with this.props.deleteAccount()
  -add this to a button onClick property and bind(this)

ACTIONS/profileActions.js
  - add Delete account & profile ACTION: setCurrentUser with empty payload.
  -

55 Edit-Profile Component
========================================================================
Copy create profile component. Our route in the backend was the same for edit and create profile.
------------------------------------------------------------------------
COMPONENTS/EDIT_PROFILE/EditProfile.js
  - copy all from createProfile
  - import getCurrentProfile action
  - add componentDidMount() which calls getCurrentProfile action 
  - connect getCurrentProfile action to redux 
  - add it to prop types

MAIN/App.js
  - create the switch private route for edit-profile
  - import the component edit-profile


COMPONENTS/EDIT_PROFILE/EditProfile.js
  - change up the text to edit profile stuff
  - add to componentWillReceiveProps:
------------------------------------------------------------------------
ComponentDidMount will run and get current profile as sooon as the EditProfile page is opened. The state will update and mapStateToProps runs, which triggers componentWillReceiveProps function. Inside, we check for the profile first then:
  - we turn the skills arrray back into a comma separated value (CSV) string
  - then we check if all profile info and if it doesnt exist turn it into an empty string.
  - finally we setState which should fill the form with all of the existing profile info.
  - onSubmit stays the same and we call createProfile with the withRouter so it will redirect correctly
------------------------------------------------------------------------

56 Add-Experience Component & Functionality
========================================================================
COMPONENTS/ADD-CREDENTIALS/AddExperience.js
  - create the file & form logic, connect redux mapstatetoprops, proptypes, componentwllreceiveprops and onsubmit functions. 
  - import it into App.js as a protected route. 
  - add separate checkbox functionality & method for 'To Date'
ACTIONS/profileActions.js
  - add the addExperience action to profileActions

58 Add-Education Component & Functionality
========================================================================
Copy experience & change some fields and names based on the routes we set up.
Create the addEducation action inside profileActions.
Create the route in App.js

59 Make the Experience Component & Display on Dashboard
========================================================================
  - Build this out and put the component the App.js render method
  - Pass the experience array prop down to the component
  - Map this prop into a table of experiences and render it.
  - Install moment library to sort date format out
#cd client
#npm i --save react-moment moment
Moment is actually a react component we set the props of

  - handle the delete button functionality
  - bring in action called deleteExperience
  - add it to connect redux method
  - add it to proptypes
  - create onCLick event on the button, bind it there because we don't have a constructor. We ALSO need to get the id of the experience so we bind it in that onClick event.
  - create onDeleteCLick function and pass through the id and history so we can redirect to dashboard after adding it.
  - add the Action to ProfileActoins and dispatch GET_PROFILE when completed

60 Dashboard Education Display & Delete
========================================================================
repeat above for education

==========
==========
PRODILE DISPLAY
==========
==========


61.Profiles Component & getProfiles Action
===========================================
Create the Profiles.js component with some conditional rendering depending on whether the profiles are null, loading or loaded.
Bring it into the App.js as an UNPROTEcTED route as we want anyone to be able to go on it.
Create profile Action in profieActions, dispatch loading actionand GET_POFILES action after receiving the data from the backend request.
Create profile Reducer case in profileReduce.js
------------------------------------------


62.Profile Items
===========================================
Create the inividual profile card for the profiles page with the relevant logic for each info output. Map it out in the Profiles.js conditionally rendered variable and display in the relevant position in the bootstrap markup. Pass down the profile as a prop. CREATE THE URL FOR THE PROFILE HERE WITH THE PROFILE HANDLE which we will use below to render the right profile onto that page.
------------------------------------------

63. Create Profile Component & Sub Components & URL handle to props
==================================================================
  - Create Profile Component & Sub Components
Profile.js
  - If the url and the props handle match, get the handle from the URL and pass it along to the action to return the right profile for that url. 
ProfileHeader.js
  - populate this component using the passed down props for the profile data, using ternaries to hide missing info.
ProfileAbout.js
  - split the name and get the first name
  - map out the skills with icons
ProfileCreds.js
  - pass down education and experience props in Profile.js these are all we need
  - bring in moment for the dates.
  - conditionally render stuff thats not required at the server endpoints
ProfileGitHub.js
  - check to see if they actually have github username in Profile.js and only render if they do.
  - pass the github username from props along into the component
  - Register to GitHub API Oauth & get the clientSecret & clientId.
  - Create a separate component that only uses Component state and the passed username prop.
  - CHeck the logic in the files comments
NotFound.js
  - create page and route for non existent routes
  - add logic into Profile.js to test for null profile response and redirect to this page.


67. Posts & Likes & Comments
======================
- make postReducer & import into index reducer
- make postAction
- create the Posts component
- make a private switch route to it in App.js
- add a Link to the posts page in Navbar.js
- create the postForm component
- create the Reducer & Action for getPosts
- create Posts.js PostFeed.js PostItem.js & put the logic in
- repeat this process for Comments & Likes

75. Prepare & Deploy
=========================
To not show out keys on github we need to do:
--------------------------------------------------
Create two files:
keys_dev.js
  - copy old keys.js in here
keys_prod.js
  - use environment varioables here

Prepare Heroku:
---------------
- sign up to heroku, download & install Heroku CLI
- create a CLI app on the website
- go to Settings/Config Vars and enter the key:value pairs variables from keys_prod.js MONGO_URI

On the Heroku server there won't be a front end server we run on port 3000. So we need to point to the build folders index.html from our server... If none of the API rooutes in server.js are being hit 
---------------------------------------------------
  - edit server.js to redirect to index.html in build folder for any other route that gets hit

create post build script for heroku to build on the server
----------------------------------------------------------
ROOT/package.json:
  - scripts:
    "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client"

  - NPM_CONFIG_PRODUCTION=false : we need this to run our dev dependancies in the client, including webpack etc.. its only run once for this command.

PUSH to Heroku:
----------------
- in your terminal do:
  - $ heroku login   //put in credentials
  - $ heroku git:remote -a dev-network-ag  //add new remote to existing git repo
  - $ git add .
  - $ git commit -am "make it better"
  - $ git push heroku master
  - $ heroku openher