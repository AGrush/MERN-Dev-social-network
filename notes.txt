6 Create basic setup & server
======================================================================================
npm init
  - server.js entry for fullstack apps

npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator

  - dev dependancies, nodemon constantly watches the application and updates
npm i -D nodemon

  - update package.json to enable nodemon with 'npm run server'
    "start": "node server.js",
    "server": "nodemon server.js"

#server.js: 
  - Create basic one file Express route.

7 Connect Mongoose & MongoDB.
====================================================================================
#CONFIG/keys.js 
  - Create key file for database
#server.js 
  - Create DB URI const
  - Call Mongoose.connect(db) and receiver promise

8 Create Route Files for Express Router and test routes that the api will respond to.
===================================================================================
  - Use express router to separate routes into separate files for each of our resources: 
  - Users, Profiles, Posts.

#ROUTES/API/users.js
  - This is just going to deal with authentication ( username/email/password )
#ROUTES/API/profile.js
  - This is going to deal with profile (location/bio/experiences/links)
#ROUTES/API/posts.js
  - This is going to deal with posts and comments

#server.js 
  - Import those files into server.js | const users = require('/routes/api/users')
  - Express().use those routes | app.use("./api/posts", posts);

#users.js 
  - create route on top of the server.js routes we just made for the extra '/test' url | router.get('/test', (req, res) = res.json())
  - this is added on to previous route so the endpoint will be api/posts/test. 
  - res.json is like res.send but with json.
  - export the route so that server.js can use it.
  - add comments of with Route, Description & Access.
#profile.js 
  - copy Users.js n fill in different message
#posts.js 
  - copy Users.js n fill in different message



++++++++++++++++++++++++++
PROFILE MODEL & API ROUTES 
++++++++++++++++++++++++++



9 Create User Model & schema
======================================================================================
  - The convention for models is to start with a capital and to be singular

#MODELS/User.js
  - Create: check file for notes on code.

10 User registration, bcrypt & postman
======================================================================================
                    200: successful response
                    400: validation error (invalid email)
                    404: not found
                    500: server errors
users.js
  - create router enndpoint for registration
  - import User model at the top
  - build logic for '/register' endpoint/route: using the User model findOne user with email of req.body.email, .then if user exists, respond with status 400 & error message, else create a new user const with the parameters from the requests body, name, email, password  (including gravatar).
  - when we send data to a route with a form.. we access it with req.body
  - install gravatar & import it at the top
npm i gravatar
  -  create a new const for avatar with takes in email & options (as per node gravatar github docs)
  - import bcrypt. 
  - run bcrypt generate salt, hash the password with the salt and save() the new user with - - mongoose and respond as json with the new user
  - We can now register a user.

11 Login User & Return token.
======================================================================================
users.js 
  - create route for Login
  - find user by email
  - if email doesnt exist respond with error
  - else compare the password with bcrypt.compare and print 'success' if true.
  - test with postman

  - import in json webtokens
  - change 'success' response to token response

13 Passport JWT Authentication Strategy
======================================================================================
Server.js
  - import passport
  - add passport middleware & config lines
CONFIG/passport.js
  - create our JWT passport strategy
ROUTES/users.js
  - create a protected route for users/current

  14 Server side validation
======================================================================================
  - Validator module
VALIDATION/register.js
  - create global function for validating input
  - create all the logic for the validateRegisterInput function here that we'll push the the request body through every time the registration endpoint is hit.
VALIDATION/is-empty.js
  - create cusom empty field validation function and export it
ROUTES/users.js
  - import /register endpoint validation function validateRegisterInput(data)
  - can add this chunk of code to any other routes that takes in data (req.body)

VALIDATION/login.js
  - paste in all the register.js validation file in and remove everything apart from email and password stuff, change name of function to validateLoginInput
ROUTES/users.js
  - import /login endpoint validation function validateRegisterInput(data)
  - add new validation code to top of login route



++++++++++++++++++++++++++
PROFILE MODEL & API ROUTES 
++++++++++++++++++++++++++



  17 Create Profile Model
======================================================================================
MODELS/Profile.js
  - Create the profile mongoose model & schema

  18 Create USER GET Api/Profile Private Route
======================================================================================
ROUTES/Profile.js
  - Import mongoose User & Profile model
  - Create the api/profile GET route
  - Test on postman

  19 Create USER POST Api/Profile Private Route
======================================================================================
ROUTES/Profile.js
  - Create the api/profile POST (&UPDATE) route

20 Create profile validation file & function
======================================================================================
VALILDATION/Profile.js
  - Create the api/profile vallidation file for the POST&UPDATE route
  - Update Private Api/Profile route to check the validation of request before responding with anything
  - Add .populate('user', ['name', 'avatar']) code to populate from 'users' into the GET response. This is because we connected our user collection to the profile inside the model.

21 Create routes to get the profile by the handle, by the ID and one to fetch all the profiles and serve as an array.
======================================================================================
ROUTES/Profile.js
  - Do those 3 routes

22 Create routes & validation files for posting new experience, posting new education.
======================================================================================
ROUTES/profile.js
  - Add POST api/profile/experience route
VLLIDATION/experience.js
  - Add eperience validation

ROUTES/profile.js
  - Add POST api/profile/education route
VLLIDATION/education.js
  - Add education validation

23 Create routes to delete education/experience and the whole profile
======================================================================================
ROUTES/profile.js
  - Add DELEte routes for experience & education routes and for the profile
  TEST ON POSTMAN



+++++++++++++++++++++++
POSTS MODEL & API ROUTES 
++++++++++++++++++++++++



24 Create Posts Model
======================================================================================
MODELS/Post.js
  - create file with api/posts model
VALIDATION/post.js
  - create file with the function to validate posts
ROUTES/posts.js
  - so far only a test route in here, add the real route for posts with the requests post parameters and save them to the model we made. Import the validation function and add the validation block before the block for submitting the new post.

26 Get & Delete Post Routes
======================================================================================
ROUTES/posts.js
  - create get route for all posts: GET api/posts
  - create get route for all posts by ID: GET api/posts/:id
  - create delete route for post by ID: DELETE api/posts/:id


27. Post Like & Unlike Routes
========================================================================================
ROUTES/posts.js
  - create the like post by id route: POST api/posts/like/:id
  - create the v similar unlike by id route: POST api/posts/unlike/:id

28. Add & Remove Comment Routes
=========================================================================================
ROUTES/posts.js
  - create the ADD comment by id route: POST api/posts/comment/:id
  - create the DELET comment by id route: DELETE api/posts/comment/:id/:comment_id 



++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
FRONT END+++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++
++++++++++++++++++++

30. Create-reeact-app & set up concurrently
===================================================================================

#npm i -g create-react-app
#create-react-app client

CLIENT/package.json:
  - add "proxy": "http://localhost:5000", so that we don't have to write it everytime

MAIN/
#npm i concurrently
  - allows us to run a script and have multiple commands

MAIN/package.json
ADD:
"scripts": {
    "start": "node server.js",
    "server": "nodemon server.js",
    "client-install": "npm install --prefix client",
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\" \"npm run client\""
  },

  31. Clean create-react-app out and setup bootstrap & assets & chrome extensions
===================================================================================
  - clear the code in App.css & replace with the theme css prepared earlier
  - add bootstrap/fontawesome/jquery and any other CDN to index.html
  - install chrome extensions

  32. Basic Layout
===================================================================================
  - create in the src folder:
COMPONENTS/LAYOUT/Navbar.js
  - copy accross the navbar from theme landing.html file, change 'class' to 'className' & import into App.js
COMPONENTS/LAYOUT/Footer.js
  - add basic funcitonal component with date object & import file into App.js
COMPONENTS/LAYOUT/Landing.js
  - copy accross the landing section from theme landing.html file, change 'class' to 'className' & import into App.js

  33. React Router Setup. All Routes in App.js & Navbar Links
===================================================================================
  - install react router on the client side
#cd client
#npm i react-router-dom

MAIN/App.js:
  import { BrowserRouter as Router, Route } from 'react-router-dom'
  add & change:
   *<Router>
      <div className="App">
        <Navbar />
        *<Route exact path="/" component={Landing} />
        <Footer />
      </div>
    </Router>
COMPONENTS/AUTH/Login.js
COMPONENTS/AUTH/Register.js
  - basic class based components with text to test routes
MAIN/App.js:
  - add react-routes for /register and /login
COMPONENTS/LAYOUT/Navbar.js
  - import Link from react router
  - add Links instead of a tags and to="/" instead of href="/.html"

  34. Create Basic Form & Login Form
==========================================================================
COMPONENTS/AUTH/Register.js
  - copy base from theme & change class to className
  - initialise the state
  - for each input make the value 'this.state.xxx' and the name 'xxx' with an onChange={onChange}. Create the onChange function:
    onChange = e => {
      this.setState({ [e.target.name]: e.target.value });
    };
  - remove form html submit action and replace with an onSubmit={onSubmit} funciton, create that function and initially just console log the form inputs as an object.
COMPONENTS/AUTH/Login.js
  - same as for register
