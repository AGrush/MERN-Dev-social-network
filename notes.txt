6 Create basic setup & server
======================================================================================
npm init
  - server.js entry for fullstack apps

npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator

  - dev dependancies, nodemon constantly watches the application and updates
npm i -D nodemon

  - update package.json to enable nodemon with 'npm run server'
    "start": "node server.js",
    "server": "nodemon server.js"

#Server.JS: 
  - Create basic one file Express route.

7 Connect Mongoose & MongoDB.
====================================================================================
#CONFIG/keys.JS 
  - Create key file for database
#Server.js 
  - Create DB URI const
  - Call Mongoose.connect(db) and receiver promise

8 Create Route Files for Express Router and test routes that the api will respond to.
===================================================================================
  - Use express router to separate routes into separate files for each of our resources: 
  - Users, Profiles, Posts.

#ROUTES/API/Users.js
  - This is just going to deal with authentication ( username/email/password )
#ROUTES/API/Profile.js
  - This is going to deal with profile (location/bio/experiences/links)
#ROUTES/API/Posts.js
  - This is going to deal with posts and comments

#Server.js 
  - Import those files into server.js | const users = require('/routes/api/users')
  - Express().use those routes | app.use("./api/posts", posts);

#Users.js 
  - create route on top of the server.js routes we just made for the extra '/test' url | router.get('/test', (req, res) = res.json())
  - this is added on to previous route so the endpoint will be api/posts/test. 
  - res.json is like res.send but with json.
  - export the route so that server.js can use it.
  - add comments of with Route, Description & Access.
#Profile.js 
  - copy Users.js n fill in different message
#Posts.js 
  - copy Users.js n fill in different message

9 Create the mongoose User Model & schema
======================================================================================
  - The convention for models is to start with a capital and to be singular

#MODELS/User.js
  - Create: check file for notes on code.

10 User registration, bcrypt & postman
======================================================================================
                    200: successful response
                    400: validation error (invalid email)
                    404: not found
                    500: server errors
users.js
  - create router enndpoint for registration
  - import User model at the top
  - build logic for '/register' endpoint/route: using the User model findOne user with email of req.body.email, .then if user exists, respond with status 400 & error message, else create a new user const with the parameters from the requests body, name, email, password  (including gravatar).
  - when we send data to a route with a form.. we access it with req.body
  - install gravatar & import it at the top
npm i gravatar
  -  create a new const for avatar with takes in email & options (as per node gravatar github docs)
  - import bcrypt. 
  - run bcrypt generate salt, hash the password with the salt and save() the new user with - - mongoose and respond as json with the new user
  - We can now register a user.

11 Login User & Return token.
======================================================================================
users.js 
  - create route for Login
  - find user by email
  - if email doesnt exist respond with error
  - else compare the password with bcrypt.compare and print 'success' if true.
  - test with postman

  - import in json webtokens
  - change 'success' response to token response

13 Passport JWT Authentication Strategy
======================================================================================
Server.js
  - import passport
  - add passport middleware & config lines
CONFIG/passport.js
  - create our JWT passport strategy
ROUTES/users.js
  - create a protected route for users/current